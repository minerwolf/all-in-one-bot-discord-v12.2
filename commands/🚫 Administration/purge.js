const { Client, Message, MessageEmbed } = require('discord.js');
var ee = require('../../config/embed.json');
var config = require('../../config/config.json');

module.exports = {
    name: 'purge',
    aliases: ['delmsg', 'clear', 'delete', 'prune'],
    category: 'üö´ Administration',
    memberpermissions: ['MANAGE_MESSAGES'],
    cooldown: 5,
    description: 'X√≥a tin nh·∫Øn c≈© h∆°n 14 ng√†y trong k√™nh',
    usage: '[COMMAND] + [l∆∞·ª£ng tin nh·∫Øn] <lo·∫°i>',
    /** 
     * @param {Client} client 
     * @param {Message} message 
     * @param {String[]} args 
     */
    run: async (client, message, args, prefix) => {
        try {
            let member = message.mentions.members.first() || message.guild.members.cache.get(args[0]);

            const commands = [
                `> bots\`       >  ‚úÖ \`\`X√≥a tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i b·ªüi bot (b·ªè qua con ng∆∞·ªùi)\`\`\n`,
                `> humans\`     >  ‚úÖ \`\`X√≥a tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i b·ªüi con ng∆∞·ªùi (b·ªè qua bot)\`\`\n`,
                `> embeds\`     >  ‚úÖ \`\`X√≥a tin nh·∫Øn c√≥ ch·ª©a m√£ nh√∫ng\`\`'n`,
                `> files\`      >  ‚úÖ \`\`X√≥a tin nh·∫Øn ch·ª©a t·ªáp/·∫£nh/ƒë√≠nh k√®m\`\`\n`,
                `> mentions\`   >  ‚úÖ \`\`X√≥a tin nh·∫Øn ch·ª©a nh·∫Øc t·ªõi ng∆∞·ªùi d√πng/th√†nh vi√™n/vai tr√≤/k√™nh\`\`\n`,
                `> pins\`       >  ‚úÖ \`\`X√≥a tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ghim\`\`\n`,
                `> text\`       >  ‚úÖ \`\`X√≥a tin nh·∫Øn ch·ª©a ch·ªØ (b·ªè qua t·ªáp/·∫£nh/ƒë√≠nh k√®m/m√£ nh√∫ng...)\`\`\n`,
                `> match\`      >  ‚úÖ \`\`<text> - X√≥a tin nh·∫Øn ch·ª©a ch·ªØ v·ªõi\`\`\n`,
                `> not\`        >  ‚úÖ \`\`<text> - X√≥a tin nh·∫Øn kh√¥ng ch·ª©a ch·ªØ v·ªõi\`\`\n`,
                `> startswith\` >  ‚úÖ \`\`<text> - X√≥a tin nh·∫Øn b·∫Øt ƒë·∫ßu v·ªõi\`\`\n`,
                `> endswith\`   >  ‚úÖ \`\`<text> - X√≥a tin nh·∫Øn k·∫øt th√∫c v·ªõi\`\`\n`
            ]

            let delembed = new MessageEmbed()
                .setColor(ee.color)
                .setTitle(`\`\` **PURGE | CLEAR | DELETE | PRUNE** \`\``)
                .setThumbnail(client.user.displayAvatarURL({ dynamic: true }))
                .addField(`**B·∫°n c√≥ th·ªÉ x√≥a m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn nh·∫•t ƒë·ªãnh trong k√™nh**`)
                .setDescription(`> C√°ch d√πng:- \`${prefix}purge <amount>\` - X√≥a m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn.\n\`${prefix}purge <amount>  ${commands.join(`\n\`${prefix}purge <amount>  `)}`)
                .setFooter(`${prefix}purge, ${prefix}clear, ${prefix}delete, ${prefix}prune`)


            if (!args[0] || !args.length) return message.channel.send(delembed);
            let amount = Number(args[0], 10) || parseInt(args[0]);
            if (isNaN(amount) || !Number.isInteger(amount)) return message.channel.send(
                new MessageEmbed()
                    .setColor(ee.color)
                    .setDescription(`H√£y nh·∫≠p s·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a trong kho·∫£ng t·ª´ 1 ƒë·∫øn 99`)
                    .setFooter(ee.footertext)
            )
            if (!amount || amount < 2 || amount > 100) return message.channel.send(
                new MessageEmbed()
                    .setColor(ee.color)
                    .setDescription(`H√£y nh·∫≠p s·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a trong kho·∫£ng t·ª´ 1 ƒë·∫øn 99`)
                    .setFooter(ee.footertext)
            )
            if (!args[1]) {

                try {
                    await message.delete()
                    await message.channel.bulkDelete(amount).then(async (m) => {

                        let embed = new MessageEmbed()
                            .setColor(ee.color)
                            .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                            .setFooter(ee.footertext)

                        message.channel.send(embed).then(msg => msg.delete({ timeout: 4000 }));
                    })

                } catch (e) {
                    message.channel.send(
                        new MessageEmbed()
                            .setDescription(e)
                    )
                }

            } else if (args[1]) {
                let msg;
                let data;
                let embed;
                switch (args[1]) {
                    case "bots":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (ms.author.bot && !ms.pinned) data.push(ms)
                        })

                        try {
                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                botsdel = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(botsdel).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "humans":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (!ms.author.bot && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                humanembed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(humanembed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "embeds":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (ms.embeds.length && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "files":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (ms.attachments.first() && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break; case "text":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (!ms.attachments.first() && !ms.embeds.length && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "mentions":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if ((ms.mentions.users.first() || ms.mentions.members.first() || ms.mentions.channels.first() || ms.mentions.roles.first()) && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "pins":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "match":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (!args[2]) return message.channel.send(embd);
                            if (ms.content.includes(args.slice(2).join(" ")) && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.footertext)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "not":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (!args[2]) return message.channel.send(embd);
                            if (!ms.content.includes(args.slice(2).join(" ")) && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "startswith":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (!args[2]) return message.channel.send(embd);
                            if (ms.content.startsWith(args.slice(2).join(" ")) && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    case "endswith":
                        msg = await message.channel.messages.fetch({ limit: amount })
                        data = []
                        msg.map(m => m).forEach(ms => {
                            if (!args[2]) return message.channel.send(embd);
                            if (ms.content.endsWith(args.slice(2).join(" ")) && !ms.pinned) data.push(ms)
                        })

                        try {

                            await message.channel.bulkDelete(data.length ? data : 1, true).then(async (m) => {

                                embed = new MessageEmbed()
                                    .setColor(ee.color)
                                    .setDescription(`‚úÖ ƒê√£ x√≥a **${m.size}**/**${amount}** tin nh·∫Øn!`)
                                    .setFooter(ee.footertext)

                                message.channel.send(embed).then(msg => msg.delete({ timeout: 5000 }));
                            })

                        } catch (e) {
                            message.channel.send(
                                new MessageEmbed()
                                    .setDescription(e)
                            )
                        }

                        break;
                    default:
                        message.channel.send(
                            new MessageEmbed()
                                .setColor(ee.wrongcolor)
                                .setDescription(`**B·∫°n kh√¥ng th·ªÉ x√≥a tin nh·∫Øn c≈© h∆°n 14 ng√†y**`)
                                .setFooter(ee.footertext)
                        )
                        break;
                }

            } else {
                return message.channel.send(
                    new MessageEmbed()
                        .setColor(ee.wrongcolor)
                        .setDescription(`**B·∫°n kh√¥ng th·ªÉ x√≥a tin nh·∫Øn c≈© h∆°n 14 ng√†y**`)
                        .setFooter(ee.footertext)
                )
            }

        } catch (e) {
            message.channel.send(
                new MessageEmbed()
                    .setColor(ee.wrongcolor)
                    .setDescription(e)
                    .setFooter(ee.footertext)
            )
        }
    }
}